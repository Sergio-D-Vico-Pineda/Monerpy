generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider = "sqlite"
    url      = "file:./dev.db"
}

model User {
    id           Int       @id @default(autoincrement())
    username     String    @unique
    passwordHash String
    email        String    @unique
    role         String    @default("user")
    createdAt    DateTime  @default(now())
    deletedAt    DateTime?

    transactionGroups     TransactionGroup[]
    transactions          Transaction[]
    recurringTransactions RecurringTransaction[]
    auditLogs             AuditLog[]
    imports               Import[]
    deletedRecords        DeletedRecord[]
}

model TransactionGroup {
    id          Int      @id @default(autoincrement())
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      Int
    name        String
    description String?
    type        String // 'income' or 'expense'
    softDeleted Boolean  @default(false)
    createdAt   DateTime @default(now())

    transactions          Transaction[]
    recurringTransactions RecurringTransaction[]
}

model Transaction {
    id              Int               @id @default(autoincrement())
    user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId          Int
    amount          Decimal
    type            String // 'income' or 'expense'
    group           TransactionGroup? @relation(fields: [groupId], references: [id])
    groupId         Int?
    description     String?
    transactionDate DateTime
    createdAt       DateTime          @default(now())
    softDeleted     Boolean           @default(false)
}

model RecurringTransaction {
    id             Int               @id @default(autoincrement())
    user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId         Int
    amount         Decimal
    type           String // 'income' or 'expense'
    group          TransactionGroup? @relation(fields: [groupId], references: [id])
    groupId        Int?
    description    String?
    startDate      DateTime
    recurrenceRule String
    nextOccurrence DateTime
    active         Boolean           @default(true)
    createdAt      DateTime          @default(now())
}

model AuditLog {
    id            Int      @id @default(autoincrement())
    user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        Int
    action        String
    tableName     String
    recordId      Int
    previousState Json?
    newState      Json?
    performedAt   DateTime @default(now())
}

model Import {
    id         Int      @id @default(autoincrement())
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     Int
    filename   String?
    mapping    Json?
    importedAt DateTime @default(now())
}

model DeletedRecord {
    id         Int      @id @default(autoincrement())
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     Int
    tableName  String
    recordId   Int
    recordData Json
    deletedAt  DateTime @default(now())
}
