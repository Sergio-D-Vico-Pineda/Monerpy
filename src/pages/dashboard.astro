---
import Layout from "@layouts/Layout.astro";
import { isAuthenticated, getCurrentUserId } from "@midd/auth";
import { prisma } from "@prisma/index.js";

const userId = getCurrentUserId(Astro.request);

if (!isAuthenticated(Astro.request) || !userId) {
  console.log(
    "dashboard.astro: User is not authenticated, redirecting to login",
  );
  return Astro.redirect("/login");
}

const groups = await prisma.transactionGroup.findMany({
  where: {
    userId,
    softDeleted: false,
  },
});

// This is the dashboard page for authenticated users
// It provides an overview of the user's financial data, quick actions, and a calendar view of transactions
// It is designed to be responsive and user-friendly, with a focus on accessibility and performance
// The dashboard includes:
// - Monthly overview of income and expenses
// - Quick actions for adding income, expenses, and recurring transactions
// - A calendar view of transactions with caching for performance
// - Navigation links to other pages (transactions, recurring transactions, profile)
// - Logout button to end the session
// The dashboard is styled using Tailwind CSS for a modern and clean look
// It uses Astro components for layout and structure, ensuring a consistent design across the application
// The calendar functionality is implemented in the script section, allowing users to view their transactions by date
---

<Layout title="Dashboard">
  <main class="bg-gray-900 p-8 min-h-screen text-white">
    <header class="flex justify-between items-center mx-auto mb-8 max-w-7xl">
      <nav class="flex items-baseline gap-x-4">
        <h2 class="font-semibold text-purple-300 hover:text-purple-100 text-lg">
          <a href="/">Home</a>
        </h2>
        <h1 class="font-bold text-purple-500 text-4xl cursor-default">
          Dashboard
        </h1>
        <h2 class="font-semibold text-purple-300 hover:text-purple-100 text-lg">
          <a href="/transactions">Transactions</a>
        </h2>
        <h2 class="font-semibold text-purple-300 hover:text-purple-100 text-lg">
          <a href="/recurring-transactions">Recurring</a>
        </h2>
      </nav>
      <div class="flex items-center gap-x-4">
        <a
          href="/profile"
          class="bg-purple-600 hover:bg-purple-700 px-4 py-2 rounded text-white transition duration-200"
        >
          Profile
        </a>
        <form action="/api/auth/logout" method="POST" class="inline">
          <button
            type="submit"
            class="bg-red-700 hover:bg-red-900 px-4 py-2 rounded text-white transition duration-200"
          >
            Logout
          </button>
        </form>
      </div>
    </header>

    <section class="flex flex-wrap justify-between gap-6 mx-auto max-w-7xl">
      <article class="bg-gray-800 shadow-lg px-4 py-3.5 rounded-lg grow">
        <h2 class="mb-4 font-semibold text-purple-400 text-xl">
          Monthly Overview
        </h2>
        <div class="space-y-2" id="monthOverview">
          <p class="flex justify-between items-baseline">
            <span>Income this month:</span>
            <span class="text-green-500 text-xl" data-monthly-income
              >0,00 €</span
            >
          </p>
          <p class="flex justify-between items-baseline">
            <span>Expenses this month:</span>
            <span class="text-red-500 text-xl" data-monthly-expense>0,00 €</span
            >
          </p>
          <p class="flex justify-between items-baseline">
            <span>Balance this month:</span>
            <span class="text-blue-500 text-xl" data-monthly-balance
              >0,00 €</span
            >
          </p>
        </div>
      </article>

      <article
        class="bg-gray-800 shadow-lg px-4 py-3.5 rounded-lg min-w-70 grow"
      >
        <h2 class="mb-4 font-semibold text-purple-400 text-xl">
          Groups Overview
        </h2>
        <div class="space-y-2">
          <p class="flex justify-between items-baseline">
            <span>Groups:</span>
            <span class="text-purple-300 text-xs">
              {groups.map((group) => group.name).join(", ")}
            </span>
          </p>
        </div>
      </article>

      <!-- Quick Actions Card -->
      <article
        class="bg-gray-800 shadow-lg px-4 py-3.5 rounded-lg min-w-0 grow"
      >
        <h2 class="mb-4 font-semibold text-purple-400 text-xl">
          Quick Actions
        </h2>
        <div class="space-y-3 overflow-y-auto">
          <div class="flex flex-wrap justify-between gap-3 w-full">
            <div class="inline-flex justify-between gap-x-3 grow-[2]">
              <div class="inline-flex w-full rounded">
                <a
                  href="/transactions/new?type=income"
                  class="text-sm flex-2/3 bg-green-600 hover:bg-green-700 p-2 rounded-l text-center text-nowrap transition duration-200"
                >
                  Add Income
                </a>
                <a
                  href="/recurring-transactions/new?type=income"
                  class="text-sm flex-1/3 bg-green-800 hover:bg-green-900 p-2 rounded-r text-center text-nowrap transition duration-200"
                >
                  Recurring
                </a>
              </div>
              <div class="inline-flex w-full rounded">
                <a
                  href="/transactions/new?type=expense"
                  class="text-sm flex-2/3 bg-red-600 hover:bg-red-700 p-2 rounded-l text-center text-nowrap transition duration-200"
                >
                  Add Expense
                </a>
                <a
                  href="/recurring-transactions/new?type=expense"
                  class="text-sm flex-1/3 bg-red-800 hover:bg-red-900 p-2 rounded-r text-center text-nowrap transition duration-200"
                >
                  Recurring
                </a>
              </div>
            </div>
            <a
              href="/transaction-groups/new"
              class="text-sm block bg-purple-600 hover:bg-purple-700 px-2 py-2 rounded text-white text-center text-nowrap transition duration-200 grow"
            >
              New Group
            </a>
          </div>
        </div>
      </article>
    </section>

    <section
      class="bg-gray-800 shadow-lg mx-auto mt-6 p-6 rounded-lg max-w-7xl"
      id="calendar-container"
    >
      <div class="flex justify-between items-center mb-4">
        <h2 class="font-semibold text-purple-400 text-xl">
          Transaction Calendar
        </h2>
        <div class="flex items-center gap-x-2">
          <button
            id="prevMonth"
            class="bg-purple-600 hover:bg-purple-700 px-3 py-1 rounded text-white transition duration-200"
          >
            &lt;
          </button>
          <span
            id="currentMonth"
            class="min-w-[160px] font-medium text-white text-lg text-center"
          ></span>
          <button
            id="nextMonth"
            class="bg-purple-600 hover:bg-purple-700 px-3 py-1 rounded text-white transition duration-200"
          >
            &gt;
          </button>
          <button
            id="refreshMonth"
            class="bg-purple-600 hover:bg-purple-700 ml-2 p-1.5 rounded text-white transition duration-200"
            title="Refresh current month"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="w-5 h-5"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fill-rule="evenodd"
                d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z"
                clip-rule="evenodd"></path>
            </svg>
          </button>
          <button
            id="clearCache"
            class="bg-purple-600 hover:bg-purple-700 ml-2 p-1.5 rounded text-white transition duration-200"
            title="Clear cached months"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="w-5 h-5"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fill-rule="evenodd"
                d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z"
                clip-rule="evenodd"></path>
            </svg>
          </button>
        </div>
      </div>
      <div class="gap-1 grid grid-cols-7">
        <div class="p-2 font-semibold text-purple-400 text-center">Mon</div>
        <div class="p-2 font-semibold text-purple-400 text-center">Tue</div>
        <div class="p-2 font-semibold text-purple-400 text-center">Wed</div>
        <div class="p-2 font-semibold text-purple-400 text-center">Thu</div>
        <div class="p-2 font-semibold text-purple-400 text-center">Fri</div>
        <div class="p-2 font-semibold text-purple-400 text-center">Sat</div>
        <div class="p-2 font-semibold text-purple-400 text-center">Sun</div>
      </div>
      <div id="calendar-grid" class="gap-1 grid grid-cols-7"></div>
    </section>
  </main>

  <script is:inline define:vars={{ userId }}>
    // Define shapes of our objects using JSDoc for type checking
    /**
     * @typedef {Object} CalendarEvent
     * @property {number} id
     * @property {string} title
     * @property {string} date
     * @property {'income'|'expense'} type
     * @property {number} amount
     * @property {boolean} recurring
     */

    /**
     * @typedef {Object} MonthSummary
     * @property {number} totalIncome
     * @property {number} totalExpense
     * @property {number} balance
     */

    /**
     * @typedef {Object} CacheEntry
     * @property {{ events: CalendarEvent[] }} data
     * @property {number} timestamp
     * @property {string} userId
     */

    // Cache management with localStorage and expiration
    const CACHE_KEY_PREFIX = "calendar_cache_";
    const CACHE_EXPIRATION = 24 * 60 * 60 * 1000; // 24 hours in milliseconds

    // Helper functions for cache management
    const getCacheKey = (year, month) => `${CACHE_KEY_PREFIX}${year}-${month}`;

    const saveToCache = (year, month, data) => {
      const key = getCacheKey(year, month);
      const cacheEntry = {
        data: { events: data.events },
        timestamp: Date.now(),
        userId: data.userId,
      };
      console.log(`[Cache] Saving data to localStorage for ${key}`, cacheEntry);
      localStorage.setItem(key, JSON.stringify(cacheEntry));
    };

    const getFromCache = (year, month, currentUserId) => {
      const key = getCacheKey(year, month);
      const cached = localStorage.getItem(key);

      if (cached) {
        const cacheEntry = JSON.parse(cached);
        const now = Date.now();
        const age = now - cacheEntry.timestamp;

        // Check both expiration and user match
        if (age < CACHE_EXPIRATION && cacheEntry.userId === currentUserId) {
          console.log(
            `[Cache] Found valid data in localStorage for ${key} (age: ${Math.round(age / 1000 / 60)} minutes)`,
          );
          return cacheEntry.data;
        } else {
          if (age >= CACHE_EXPIRATION) {
            console.log(
              `[Cache] Found expired data in localStorage for ${key} (age: ${Math.round(age / 1000 / 60)} minutes)`,
            );
          } else {
            console.log(
              `[Cache] Found data for different user in localStorage for ${key}`,
            );
          }
          localStorage.removeItem(key);
        }
      }

      console.log(`[Cache] No valid data in localStorage for ${key}`);
      return null;
    };

    const clearCache = () => {
      console.log("[Cache] Clearing all calendar cache from localStorage");
      Object.keys(localStorage)
        .filter((key) => key.startsWith(CACHE_KEY_PREFIX))
        .forEach((key) => localStorage.removeItem(key));
    };

    // Calendar functionality
    const prevMonthBtn = document.getElementById("prevMonth");
    const nextMonthBtn = document.getElementById("nextMonth");
    const monthDisplay = document.getElementById("currentMonth");
    const calendarGrid = document.getElementById("calendar-grid");
    const refreshBtn = document.getElementById("refreshMonth");
    const clearCacheBtn = document.getElementById("clearCache");

    let currentDate = new Date();

    // Format currency
    const formatCurrency = (amount) => {
      return new Intl.NumberFormat("es-ES", {
        style: "currency",
        currency: "EUR",
      }).format(amount);
    };

    // Summary calculation function
    function calculateMonthSummary(events) {
      console.log(
        "[calculateMonthSummary] Starting calculation with events:",
        events,
      );
      const summary = events.reduce(
        (acc, event) => {
          // console.log(`[calculateMonthSummary] Processing event:`, {
          //   id: event.id,
          //   type: event.type,
          //   amount: event.amount,
          //   date: event.date,
          // });
          const amount = event.amount;
          if (event.type === "income") {
            acc.totalIncome += amount;
          } else if (event.type === "expense") {
            acc.totalExpense += amount;
          }
          acc.balance = acc.totalIncome - acc.totalExpense;
          return acc;
        },
        { totalIncome: 0, totalExpense: 0, balance: 0 },
      );
      console.log("[calculateMonthSummary] Final summary:", summary);
      return summary;
    }

    // Update month overview with calculated summary
    const updateMonthOverview = (summary) => {
      const incomeElement = document.querySelector("[data-monthly-income]");
      const expenseElement = document.querySelector("[data-monthly-expense]");
      const balanceElement = document.querySelector("[data-monthly-balance]");

      if (incomeElement) {
        incomeElement.textContent = formatCurrency(summary.totalIncome);
      }
      if (expenseElement) {
        expenseElement.textContent = formatCurrency(summary.totalExpense);
      }
      if (balanceElement) {
        balanceElement.textContent = formatCurrency(summary.balance);
      }
    };

    // Load month data from localStorage cache or API
    async function loadMonth(year, month) {
      // console.log(`[loadMonth] Loading data for ${year}-${month}`);

      const cachedData = getFromCache(year, month, userId);
      if (cachedData) {
        console.log(`[loadMonth] Using cached events:`, cachedData.events);
        updateCalendar(cachedData.events);
        updateMonthOverview(calculateMonthSummary(cachedData.events));
        return;
      }

      try {
        console.log(
          `[loadMonth] Fetching fresh data from API for ${year}-${month}`,
        );
        const response = await fetch(
          `/api/calendar?year=${year}&month=${month}`,
        );
        if (!response.ok) {
          const errorText = await response.text();
          console.error(`[loadMonth] API Error Response:`, {
            status: response.status,
            statusText: response.statusText,
            body: errorText,
          });
          throw new Error(
            `Failed to fetch calendar data: ${response.status} ${response.statusText}`,
          );
        }

        const data = await response.json();
        console.log(`[loadMonth] Received API data:`, data);

        // Save to cache with user ID
        saveToCache(year, month, { ...data, userId });

        updateCalendar(data.events);
        updateMonthOverview(calculateMonthSummary(data.events));
      } catch (error) {
        console.error("[loadMonth] Error:", {
          message: error.message,
          stack: error.stack,
          year,
          month,
        });
      }
    }

    // Update calendar UI
    function updateCalendar(events) {
      // console.log("[updateCalendar] Starting calendar update");
      if (!calendarGrid) {
        console.error("[updateCalendar] Calendar grid element not found");
        return;
      }

      const year = currentDate.getFullYear();
      const month = currentDate.getMonth();
      // console.log(`[updateCalendar] Rendering calendar for ${year}-${month + 1}`);

      // Get first day of month and total days
      const firstDay = new Date(year, month, 1).getDay();
      const lastDay = new Date(year, month + 1, 0).getDate();
      let startingDay = firstDay - 1; // Convert to Monday-based
      if (startingDay === -1) startingDay = 6; // If Sunday, make it last day

      console.log("[updateCalendar] Calendar parameters:", {
        firstDay,
        lastDay,
        startingDay,
        totalEvents: events.length,
      });

      // Create calendar grid
      const cells = [];

      // Add empty cells for the days before the first day of the month
      for (let i = 0; i < startingDay; i++) {
        cells.push(
          '<div class="bg-gray-700 p-2 rounded-lg min-h-[100px]"></div>',
        );
      }

      // Add cells for each day of the month
      for (let day = 1; day <= lastDay; day++) {
        const realDate = new Date(year, month, day + 1)
          .toISOString()
          .split("T")[0];

        const currentDateISO = new Date(year, month, day)
          .toISOString()
          .split("T")[0];

        console.log(`[updateCalendar] Processing day ${day} (${realDate})`);
        const dayEvents = events.filter((event) => {
          console.log(`[updateCalendar] Filtering events for ${event.date}`);
          return event.date === currentDateISO;
        });

        let cellContent = `<div class="relative bg-gray-700 p-2 rounded-lg min-h-[100px]">
          <a href="/transactions/new?date=${realDate}" class="top-1 right-2 absolute text-gray-400">${day}</a>`;

        if (dayEvents.length > 0) {
          console.log(
            `[updateCalendar] Processing day ${day} (${realDate}) with events:`,
            dayEvents,
          );
          cellContent += '<div class="space-y-1 mt-6">';
          dayEvents.forEach((event) => {
            cellContent += `
              <a href="${event.recurring ? "/recurring-transactions" : "/transactions"}/${event.id}/edit" 
                 class="block text-sm p-1 rounded ${
                   event.type === "income"
                     ? event.recurring
                       ? "text-green-600 hover:bg-green-900/50"
                       : "text-green-400 hover:bg-green-900/30"
                     : event.recurring
                       ? "text-red-600 hover:bg-red-900/50"
                       : "text-red-400 hover:bg-red-900/30"
                 } hover:no-underline transition-colors">
                ${formatCurrency(event.amount)}
                ${event.title ? `<br><span class="text-xs ${event.recurring ? "text-gray-500" : "text-gray-400"}">${event.title}</span>` : ""}
              </a>`;
          });
          cellContent += "</div>";
        }

        cellContent += "</div>";
        cells.push(cellContent);
      }

      // Add empty cells for the remaining days to complete the grid
      const totalCells = startingDay + lastDay;
      const remainingCells = 7 - (totalCells % 7);
      if (remainingCells < 7) {
        for (let i = 0; i < remainingCells; i++) {
          cells.push(
            '<div class="bg-gray-700 p-2 rounded-lg min-h-[100px]"></div>',
          );
        }
      }

      calendarGrid.innerHTML = cells.join("");
    }

    // Navigation functions
    function updateMonthDisplay() {
      if (!monthDisplay) return;
      const monthNames = [
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December",
      ];
      monthDisplay.textContent = `${monthNames[currentDate.getMonth()]} ${currentDate.getFullYear()}`;
    }

    // Add event listeners for navigation
    if (prevMonthBtn) {
      prevMonthBtn.addEventListener("click", () => {
        console.log("[Navigation] Moving to previous month");
        currentDate.setMonth(currentDate.getMonth() - 1);
        loadCurrentMonth();
      });
    }

    if (nextMonthBtn) {
      nextMonthBtn.addEventListener("click", () => {
        console.log("[Navigation] Moving to next month");
        currentDate.setMonth(currentDate.getMonth() + 1);
        loadCurrentMonth();
      });
    }

    if (refreshBtn) {
      refreshBtn.addEventListener("click", async () => {
        const year = currentDate.getFullYear();
        const month = currentDate.getMonth() + 1;
        console.log(`[Refresh] Forcing refresh for ${year}-${month}`);
        localStorage.removeItem(getCacheKey(year, month));
        await loadCurrentMonth();
      });
    }

    if (clearCacheBtn) {
      clearCacheBtn.addEventListener("click", () => {
        clearCache();
        loadCurrentMonth();
      });
    }

    // Load current month
    async function loadCurrentMonth() {
      const year = currentDate.getFullYear();
      const month = currentDate.getMonth() + 1;
      // console.log(`[loadCurrentMonth] Checking data for ${year}-${month}`);

      updateMonthDisplay();
      await loadMonth(year, month);
    }

    // Initialize calendar
    // const initialYear = currentDate.getFullYear();
    // const initialMonth = currentDate.getMonth() + 1;
    loadCurrentMonth();
  </script>
</Layout>
