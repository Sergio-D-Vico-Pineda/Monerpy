---
import Layout from "@layouts/Layout.astro";
import { isAuthenticated, getCurrentUserId } from "../../middleware/auth";
import { reportService } from "../../lib/services/report";
import Toast from "../../components/Toast.astro";

if (!isAuthenticated(Astro.request)) {
    return Astro.redirect("/login");
}

const userId = await getCurrentUserId(Astro.request);
if (!userId) {
    return Astro.redirect("/login");
}

// Get current month's data by default
const now = new Date();
const currentMonth = await reportService.getMonthlyComparison(
    userId,
    now.getFullYear(),
    now.getMonth() + 1
);

// Calculate month-over-month changes
const incomeChange = currentMonth.previousPeriod.totalIncome 
    ? ((currentMonth.currentPeriod.totalIncome - currentMonth.previousPeriod.totalIncome) / currentMonth.previousPeriod.totalIncome) * 100 
    : 0;
const expensesChange = currentMonth.previousPeriod.totalExpenses 
    ? ((currentMonth.currentPeriod.totalExpenses - currentMonth.previousPeriod.totalExpenses) / currentMonth.previousPeriod.totalExpenses) * 100 
    : 0;
const netChange = currentMonth.previousPeriod.netAmount 
    ? ((currentMonth.currentPeriod.netAmount - currentMonth.previousPeriod.netAmount) / Math.abs(currentMonth.previousPeriod.netAmount)) * 100 
    : 0;

// Pass data to frontend
const data = {
    currentPeriod: currentMonth.currentPeriod,
    previousPeriod: currentMonth.previousPeriod,
    changes: {
        income: incomeChange,
        expenses: expensesChange,
        net: netChange,
    },
    csvData: reportService.generateCSVReport(currentMonth.currentPeriod),
};
---

<Layout title="Financial Reports">
  <script id="reportData" type="application/json">
    {JSON.stringify(data)}
  </script>
  <main class="min-h-screen bg-gray-900 text-white p-8">
    <header class="mb-8 max-w-7xl mx-auto">
      <nav class="flex items-baseline space-x-4">
        <a href="/dashboard" class="text-lg font-semibold text-purple-300">Dashboard</a>
        <h1 class="text-4xl font-bold text-purple-500 cursor-default">Reports</h1>
      </nav>
    </header>

    <div class="max-w-7xl mx-auto space-y-8">
      <!-- Report Navigation -->
      <div class="bg-gray-800 p-6 rounded-lg shadow-lg">
        <div class="flex items-center justify-between mb-4">
          <h2 class="text-xl font-semibold text-purple-400">Report Options</h2>
          <div class="flex space-x-4">
            <button id="monthlyView" class="px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700 transition duration-200">Monthly</button>
            <button id="yearlyView" class="px-4 py-2 bg-gray-600 text-white rounded hover:bg-purple-700 transition duration-200">Yearly</button>
            <button id="customView" class="px-4 py-2 bg-gray-600 text-white rounded hover:bg-purple-700 transition duration-200">Custom Range</button>
          </div>
        </div>

        <!-- Date Range Selectors -->
        <div id="monthlySelector" class="flex items-center space-x-4">
          <input
            type="month"
            id="monthInput"
            class="px-4 py-2 bg-gray-700 rounded focus:outline-none focus:ring-2 focus:ring-purple-500"
            value={`${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}`}
          />
          <button id="updateMonthly" class="px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700 transition duration-200">Update</button>
        </div>

        <div id="yearlySelector" class="hidden items-center space-x-4">
          <input
            type="number"
            id="yearInput"
            class="px-4 py-2 bg-gray-700 rounded focus:outline-none focus:ring-2 focus:ring-purple-500 w-32"
            value={now.getFullYear()}
            min="2000"
            max="2100"
          />
          <button id="updateYearly" class="px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700 transition duration-200">Update</button>
        </div>

        <div id="customSelector" class="hidden space-y-4">
          <div class="grid grid-cols-2 gap-4">
            <div class="space-y-2">
              <label class="block text-gray-300">Period 1</label>
              <div class="flex space-x-2">
                <input
                  type="date"
                  id="range1Start"
                  class="px-4 py-2 bg-gray-700 rounded focus:outline-none focus:ring-2 focus:ring-purple-500"
                />
                <input
                  type="date"
                  id="range1End"
                  class="px-4 py-2 bg-gray-700 rounded focus:outline-none focus:ring-2 focus:ring-purple-500"
                />
              </div>
            </div>
            <div class="space-y-2">
              <label class="block text-gray-300">Period 2</label>
              <div class="flex space-x-2">
                <input
                  type="date"
                  id="range2Start"
                  class="px-4 py-2 bg-gray-700 rounded focus:outline-none focus:ring-2 focus:ring-purple-500"
                />
                <input
                  type="date"
                  id="range2End"
                  class="px-4 py-2 bg-gray-700 rounded focus:outline-none focus:ring-2 focus:ring-purple-500"
                />
              </div>
            </div>
          </div>
          <button id="updateCustom" class="px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700 transition duration-200">Compare Periods</button>
        </div>
      </div>

      <!-- Summary Cards -->
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
        <!-- Income Summary -->
        <div class="bg-gray-800 p-6 rounded-lg shadow-lg">
          <h3 class="text-lg font-semibold text-green-400 mb-2">Income</h3>
          <p class="text-2xl font-bold">${data.currentPeriod.totalIncome.toFixed(2)}</p>
          <p class={`text-sm ${data.changes.income >= 0 ? 'text-green-400' : 'text-red-400'}`}>
            {data.changes.income >= 0 ? '↑' : '↓'} {Math.abs(data.changes.income).toFixed(1)}% vs previous period
          </p>
        </div>

        <!-- Expenses Summary -->
        <div class="bg-gray-800 p-6 rounded-lg shadow-lg">
          <h3 class="text-lg font-semibold text-red-400 mb-2">Expenses</h3>
          <p class="text-2xl font-bold">${data.currentPeriod.totalExpenses.toFixed(2)}</p>
          <p class={`text-sm ${data.changes.expenses <= 0 ? 'text-green-400' : 'text-red-400'}`}>
            {data.changes.expenses >= 0 ? '↑' : '↓'} {Math.abs(data.changes.expenses).toFixed(1)}% vs previous period
          </p>
        </div>

        <!-- Net Amount -->
        <div class="bg-gray-800 p-6 rounded-lg shadow-lg">
          <h3 class="text-lg font-semibold text-purple-400 mb-2">Net Amount</h3>
          <p class="text-2xl font-bold">${data.currentPeriod.netAmount.toFixed(2)}</p>
          <p class={`text-sm ${data.changes.net >= 0 ? 'text-green-400' : 'text-red-400'}`}>
            {data.changes.net >= 0 ? '↑' : '↓'} {Math.abs(data.changes.net).toFixed(1)}% vs previous period
          </p>
        </div>
      </div>

      <!-- Charts -->
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <!-- Daily Trend Chart -->
        <div class="bg-gray-800 p-6 rounded-lg shadow-lg">
          <h3 class="text-lg font-semibold text-purple-400 mb-4">Daily Trend</h3>
          <canvas id="dailyTrendChart" class="w-full h-64"></canvas>
        </div>

        <!-- Category Distribution -->
        <div class="bg-gray-800 p-6 rounded-lg shadow-lg">
          <h3 class="text-lg font-semibold text-purple-400 mb-4">Category Distribution</h3>
          <div id="categoryChart" class="w-full h-64"></div>
        </div>

        <!-- Income vs Expenses Chart -->
        <div class="bg-gray-800 p-6 rounded-lg shadow-lg">
          <h3 class="text-xl font-semibold text-purple-400 mb-4">Income vs Expenses</h3>
          <canvas id="comparisonChart"></canvas>
        </div>

        <!-- Daily Transactions Chart -->
        <div class="bg-gray-800 p-6 rounded-lg shadow-lg">
          <h3 class="text-xl font-semibold text-purple-400 mb-4">Daily Transactions</h3>
          <canvas id="dailyChart"></canvas>
        </div>
      </div>

      <!-- Detailed Tables -->
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <!-- Income by Category -->
        <div class="bg-gray-800 p-6 rounded-lg shadow-lg">
          <h3 class="text-lg font-semibold text-green-400 mb-4">Income by Category</h3>
          <div class="overflow-x-auto">
            <table class="min-w-full">
              <thead>
                <tr class="text-left text-gray-300">
                  <th class="py-2">Category</th>
                  <th class="py-2">Amount</th>
                  <th class="py-2">% of Total</th>
                </tr>
              </thead>
              <tbody>
                {data.currentPeriod.incomeByGroup.map((item: { groupName: string; amount: number }) => (
                  <tr class="border-t border-gray-700">
                    <td class="py-2">{item.groupName}</td>
                    <td class="py-2">${item.amount.toFixed(2)}</td>
                    <td class="py-2">
                      {((item.amount / data.currentPeriod.totalIncome) * 100).toFixed(1)}%
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>

        <!-- Expenses by Category -->
        <div class="bg-gray-800 p-6 rounded-lg shadow-lg">
          <h3 class="text-lg font-semibold text-red-400 mb-4">Expenses by Category</h3>
          <div class="overflow-x-auto">
            <table class="min-w-full">
              <thead>
                <tr class="text-left text-gray-300">
                  <th class="py-2">Category</th>
                  <th class="py-2">Amount</th>
                  <th class="py-2">% of Total</th>
                </tr>
              </thead>
              <tbody>
                {data.currentPeriod.expensesByGroup.map((item: { groupName: string; amount: number }) => (
                  <tr class="border-t border-gray-700">
                    <td class="py-2">{item.groupName}</td>
                    <td class="py-2">${item.amount.toFixed(2)}</td>
                    <td class="py-2">
                      {((item.amount / data.currentPeriod.totalExpenses) * 100).toFixed(1)}%
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>

      <!-- Add export button -->
      <div class="mt-6">
        <button id="exportCSV" class="px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700 transition duration-200">
          Export to CSV
        </button>
      </div>
    </div>
  </main>
  <Toast />
</Layout>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
  /// <reference types="chart.js" />
  import ApexCharts from 'apexcharts';
  import { Chart } from 'node_modules/chart.js/dist';

  interface DailyTotal {
    date: string;
    income: number;
    expenses: number;
  }

  interface ExpenseGroup {
    groupName: string;
    amount: number;
  }

  interface MonthlyData {
    currentMonth: {
      dailyTotals: DailyTotal[];
      expensesByGroup: ExpenseGroup[];
    }
  }

  declare const data: MonthlyData;

  // Initialize Chart.js for daily trend
  function initDailyTrendChart(data: MonthlyData) {
    const ctx = document.getElementById('dailyTrendChart') as HTMLCanvasElement;
    if (!ctx) return;

    const dailyData = data.currentMonth.dailyTotals;
    
    new Chart(ctx, {
      type: 'line',
      data: {
        labels: dailyData.map(d => new Date(d.date).toLocaleDateString()),
        datasets: [
          {
            label: 'Income',
            data: dailyData.map(d => d.income),
            borderColor: '#34D399',
            tension: 0.4,
            fill: false
          },
          {
            label: 'Expenses',
            data: dailyData.map(d => d.expenses),
            borderColor: '#F87171',
            tension: 0.4,
            fill: false
          }
        ]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: 'top',
            labels: {
              color: '#E5E7EB'
            }
          }
        },
        scales: {
          x: {
            grid: {
              color: '#374151'
            },
            ticks: {
              color: '#E5E7EB'
            }
          },
          y: {
            grid: {
              color: '#374151'
            },
            ticks: {
              color: '#E5E7EB'
            }
          }
        }
      }
    });
  }

  // Initialize ApexCharts for category distribution
  function initCategoryChart(data: any) {
    const expensesByCategory = data.currentMonth.expensesByGroup.map((item: any) => ({
      x: item.groupName,
      y: item.amount
    }));

    const options = {
      series: [
        {
          data: expensesByCategory
        }
      ],
      chart: {
        type: 'treemap',
        height: 256,
        background: 'transparent',
        foreColor: '#E5E7EB'
      },
      title: {
        text: 'Expense Distribution',
        style: {
          color: '#E5E7EB'
        }
      },
      plotOptions: {
        treemap: {
          distributed: true,
          enableShades: true
        }
      },
      theme: {
        mode: 'dark',
        palette: 'palette8'
      }
    };

    const chart = new ApexCharts(document.querySelector("#categoryChart"), options);
    chart.render();
  }

  // Initialize charts with initial data
  const initialData = data;
  initDailyTrendChart(initialData);
  initCategoryChart(initialData);

  // View switching logic
  const monthlyBtn = document.getElementById('monthlyView');
  const yearlyBtn = document.getElementById('yearlyView');
  const customBtn = document.getElementById('customView');
  
  const monthlySelector = document.getElementById('monthlySelector');
  const yearlySelector = document.getElementById('yearlySelector');
  const customSelector = document.getElementById('customSelector');

  monthlyBtn?.addEventListener('click', () => {
    setActiveView('monthly');
  });

  yearlyBtn?.addEventListener('click', () => {
    setActiveView('yearly');
  });

  customBtn?.addEventListener('click', () => {
    setActiveView('custom');
  });

  function setActiveView(view: 'monthly' | 'yearly' | 'custom') {
    // Hide all selectors
    monthlySelector?.classList.add('hidden');
    yearlySelector?.classList.add('hidden');
    customSelector?.classList.add('hidden');

    // Reset all buttons
    monthlyBtn?.classList.replace('bg-purple-600', 'bg-gray-600');
    yearlyBtn?.classList.replace('bg-purple-600', 'bg-gray-600');
    customBtn?.classList.replace('bg-purple-600', 'bg-gray-600');

    // Show selected view
    switch (view) {
      case 'monthly':
        monthlySelector?.classList.remove('hidden');
        monthlySelector?.classList.add('flex');
        monthlyBtn?.classList.replace('bg-gray-600', 'bg-purple-600');
        break;
      case 'yearly':
        yearlySelector?.classList.remove('hidden');
        yearlySelector?.classList.add('flex');
        yearlyBtn?.classList.replace('bg-gray-600', 'bg-purple-600');
        break;
      case 'custom':
        customSelector?.classList.remove('hidden');
        customSelector?.classList.add('flex');
        customBtn?.classList.replace('bg-gray-600', 'bg-purple-600');
        break;
    }
  }

  // Initialize with monthly view
  setActiveView('monthly');

  // Utility function to show toast messages
  function showToast(message: string, type: 'success' | 'error') {
    const toast = document.createElement('div');
    toast.className = `fixed bottom-4 right-4 p-4 rounded-lg text-white ${
      type === 'success' ? 'bg-green-500' : 'bg-red-500'
    } transition-opacity duration-500`;
    toast.textContent = message;
    document.body.appendChild(toast);
    
    setTimeout(() => {
      toast.style.opacity = '0';
      setTimeout(() => toast.remove(), 500);
    }, 3000);
  }

  // Function to reinitialize charts with new data
  function initializeCharts() {
    const reportData = document.getElementById('reportData');
    if (!reportData?.textContent) return;
    
    const newData = JSON.parse(reportData.textContent);
    initDailyTrendChart(newData);
    initCategoryChart(newData);
  }

  // Update data when form is submitted
  async function updateReport(url: string) {
    try {
      const response = await fetch(url);
      const newData = await response.json();
      if (response.ok) {
        // Update the data element
        document.getElementById('reportData')!.textContent = JSON.stringify(newData);
        // Reinitialize charts
        initializeCharts();
        showToast('Report updated successfully', 'success');
      } else {
        showToast(newData.error || 'Failed to update report', 'error');
      }
    } catch (error) {
      showToast('Failed to update report', 'error');
    }
  }

  // Monthly form submission
  const monthInput = document.getElementById('monthInput') as HTMLInputElement;
  const updateMonthlyBtn = document.getElementById('updateMonthly');
  updateMonthlyBtn?.addEventListener('click', async () => {
    const [year, month] = monthInput.value.split('-');
    updateReport(`/api/reports/monthly?year=${year}&month=${month}`);
  });

  // Yearly form submission
  const yearInput = document.getElementById('yearInput') as HTMLInputElement;
  const updateYearlyBtn = document.getElementById('updateYearly');
  updateYearlyBtn?.addEventListener('click', async () => {
    updateReport(`/api/reports/yearly?year=${yearInput.value}`);
  });

  // Custom range form submission
  const range1Start = document.getElementById('range1Start') as HTMLInputElement;
  const range1End = document.getElementById('range1End') as HTMLInputElement;
  const range2Start = document.getElementById('range2Start') as HTMLInputElement;
  const range2End = document.getElementById('range2End') as HTMLInputElement;
  const updateCustomBtn = document.getElementById('updateCustom');
  updateCustomBtn?.addEventListener('click', async () => {
    if (!range1Start?.value || !range1End?.value || !range2Start?.value || !range2End?.value) {
      showToast('Please fill in all date fields', 'error');
      return;
    }

    const url = `/api/reports/custom?` +
      `range1Start=${range1Start.value}&range1End=${range1End.value}&` +
      `range2Start=${range2Start.value}&range2End=${range2End.value}`;
    updateReport(url);
  });
</script>
