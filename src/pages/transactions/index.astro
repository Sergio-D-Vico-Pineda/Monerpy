---
import Layout from "@layouts/Layout.astro";
import { isAuthenticated, getCurrentUserId } from "../../middleware/auth";
import { transactionService } from "../../lib/services/transaction";
import { prisma } from "@prisma/index.js";

if (!isAuthenticated(Astro.request)) {
    return Astro.redirect("/login");
}

const userId = getCurrentUserId(Astro.request);
if (!userId) {
    return Astro.redirect("/login");
}

// Get page from query params
const page = parseInt(Astro.url.searchParams.get("page") ?? "1");
const search = Astro.url.searchParams.get("search") ?? "";

// Get transactions data
const { transactions, total, pages, summary } = await transactionService.list(
    userId,
    page,
    { search },
);

// Get all groups for filters
const groups = await prisma.transactionGroup.findMany({
    where: { userId, softDeleted: false },
    select: { id: true, name: true, type: true },
});
---

<Layout title="Transactions">
    <main class="min-h-screen bg-gray-900 text-white p-8">
        <header class="mb-8 max-w-7xl mx-auto">
            <div class="flex items-center justify-between mb-8">
                <nav class="flex items-baseline space-x-4">
                    <h2 class="text-lg font-semibold text-purple-300">
                        <a href="/dashboard">Dashboard</a>
                    </h2>
                    <h1
                        class="text-4xl font-bold text-purple-500 cursor-default"
                    >
                        Transactions
                    </h1>
                    <h2 class="text-lg font-semibold text-purple-300">
                        <a href="/transaction-groups">Groups</a>
                    </h2>
                </nav>
                <div class="flex space-x-4">
                    <!-- Date Range Filter -->
                    <div class="relative">
                        <select
                            id="dateRangeFilter"
                            class="px-4 py-2 bg-gray-800 text-white rounded focus:outline-none focus:ring-2 focus:ring-purple-500"
                        >
                            <option value="">All Time</option>
                            <option value="last7days">Last 7 Days</option>
                            <option value="last30days">Last 30 Days</option>
                            <option value="thisMonth">This Month</option>
                        </select>
                    </div>

                    <button
                        id="bulkDeleteBtn"
                        disabled
                        class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition duration-200 disabled:opacity-50 disabled:cursor-not-allowed hidden"
                    >
                        Delete Selected
                    </button>
                    <button
                        id="bulkGroupBtn"
                        disabled
                        class="px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700 transition duration-200 disabled:opacity-50 disabled:cursor-not-allowed hidden"
                    >
                        Set Group
                    </button>
                    <a
                        href="/transactions/new"
                        class="px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700 transition duration-200 inline-block"
                    >
                        Add Transaction
                    </a>
                </div>
            </div>

            <!-- Summary Cards -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
                <div class="bg-gray-800 p-6 rounded-lg shadow-lg">
                    <h3 class="text-lg font-semibold text-purple-400 mb-2">
                        Total Income
                    </h3>
                    <p class="text-2xl text-green-500">
                        {
                            summary.totalIncome.toLocaleString("en-US", {
                                minimumFractionDigits: 2,
                            })
                        } €
                    </p>
                </div>
                <div class="bg-gray-800 p-6 rounded-lg shadow-lg">
                    <h3 class="text-lg font-semibold text-purple-400 mb-2">
                        Total Expenses
                    </h3>
                    <p class="text-2xl text-red-500">
                        {
                            summary.totalExpense.toLocaleString("en-US", {
                                minimumFractionDigits: 2,
                            })
                        } €
                    </p>
                </div>
                <div class="bg-gray-800 p-6 rounded-lg shadow-lg">
                    <h3 class="text-lg font-semibold text-purple-400 mb-2">
                        Balance
                    </h3>
                    <p class="text-2xl text-blue-500">
                        {
                            summary.balance.toLocaleString("en-US", {
                                minimumFractionDigits: 2,
                            })
                        } €
                    </p>
                </div>
                <div>Total test: {total}</div>
            </div>

            <!-- Filters -->
            <div class="bg-gray-800 p-6 rounded-lg shadow-lg mb-6">
                <div
                    class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4"
                >
                    <!-- Quick Search -->
                    <div class="flex items-center space-x-2">
                        <input
                            type="text"
                            id="quickSearch"
                            placeholder="Search current page..."
                            class="w-full px-3 py-2 bg-gray-700 text-white rounded focus:ring-2 focus:ring-purple-500 focus:outline-none"
                        />
                    </div>

                    <!-- Global Search -->
                    <div class="flex items-center space-x-2">
                        <input
                            type="text"
                            id="globalSearch"
                            placeholder="Search all transactions..."
                            class="w-full px-3 py-2 bg-gray-700 text-white rounded focus:ring-2 focus:ring-purple-500 focus:outline-none"
                        />
                        <button
                            id="searchBtn"
                            class="px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700 transition duration-200"
                        >
                            Search
                        </button>
                    </div>

                    <!-- Date Range -->
                    <div class="flex items-center space-x-2">
                        <input
                            type="date"
                            id="startDate"
                            class="w-full px-3 py-2 bg-gray-700 text-white rounded focus:ring-2 focus:ring-purple-500 focus:outline-none"
                        />
                        <input
                            type="date"
                            id="endDate"
                            class="w-full px-3 py-2 bg-gray-700 text-white rounded focus:ring-2 focus:ring-purple-500 focus:outline-none"
                        />
                    </div>

                    <!-- Type & Group Filters -->
                    <div class="flex items-center space-x-2">
                        <select
                            id="typeFilter"
                            class="w-1/2 px-3 py-2 bg-gray-700 text-white rounded focus:ring-2 focus:ring-purple-500 focus:outline-none"
                        >
                            <option value="">All Types</option>
                            <option value="income">Income</option>
                            <option value="expense">Expense</option>
                        </select>
                        <select
                            id="groupFilter"
                            class="w-1/2 px-3 py-2 bg-gray-700 text-white rounded focus:ring-2 focus:ring-purple-500 focus:outline-none"
                        >
                            <option value="">All Groups</option>
                            {
                                groups.map((group) => (
                                    <option value={group.id}>
                                        {group.name}
                                    </option>
                                ))
                            }
                        </select>
                    </div>
                </div>
            </div>
        </header>

        <!-- Transactions Table -->
        <div
            class="max-w-7xl mx-auto bg-gray-800 rounded-lg shadow-lg overflow-hidden"
        >
            <div class="overflow-x-auto">
                <table
                    class="w-full text-left"
                    data-transactions={JSON.stringify(
                        transactions.map((t) => ({
                            id: t.id,
                            date: t.transactionDate,
                            description: t.description ?? "",
                            amount: t.amount.toNumber(),
                            type: t.type,
                            groupId: t.group?.id ?? null,
                            groupName: t.group?.name ?? "",
                        })),
                    )}
                >
                    <thead class="bg-gray-700">
                        <tr>
                            <th class="p-4">
                                <input
                                    type="checkbox"
                                    id="selectAll"
                                    class="rounded border-gray-600 text-purple-600 focus:ring-purple-500"
                                />
                            </th>
                            <th class="p-4 font-semibold">Date</th>
                            <th class="p-4 font-semibold">Description</th>
                            <th class="p-4 font-semibold">Amount</th>
                            <th class="p-4 font-semibold">Type</th>
                            <th class="p-4 font-semibold">Group</th>
                            <th class="p-4 font-semibold">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            transactions.map((transaction) => (
                                <tr
                                    class="border-t border-gray-700 hover:bg-gray-700/50"
                                    data-transaction-id={transaction.id}
                                >
                                    <td class="p-4">
                                        <input
                                            type="checkbox"
                                            class="transaction-checkbox rounded border-gray-600 text-purple-600 focus:ring-purple-500"
                                        />
                                    </td>
                                    <td class="p-4 whitespace-nowrap">
                                        {new Date(
                                            transaction.transactionDate,
                                        ).toLocaleString("en-US", {
                                            day: "numeric",
                                            month: "short",
                                            year: "numeric",
                                            hour: "2-digit",
                                            minute: "2-digit",
                                        })}
                                    </td>
                                    <td class="p-4">
                                        {transaction.description}
                                    </td>
                                    <td class="p-4 whitespace-nowrap">
                                        <span
                                            class={
                                                transaction.type === "income"
                                                    ? "text-green-500"
                                                    : "text-red-500"
                                            }
                                        >
                                            €
                                            {transaction.amount
                                                .toNumber()
                                                .toLocaleString("en-US", {
                                                    minimumFractionDigits: 2,
                                                })}
                                        </span>
                                    </td>
                                    <td class="p-4 capitalize">
                                        {transaction.type}
                                    </td>
                                    <td class="p-4">
                                        {transaction.group?.name ?? "-"}
                                    </td>
                                    <td class="p-4 whitespace-nowrap">
                                        <div class="flex items-center space-x-2">
                                            <a
                                                href={`/transactions/${transaction.id}/edit`}
                                                class="text-purple-400 hover:text-purple-300"
                                            >
                                                Edit
                                            </a>
                                            <button
                                                class="delete-btn text-red-400 hover:text-red-300"
                                                data-id={transaction.id}
                                            >
                                                Delete
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            ))
                        }
                        {
                            transactions.length === 0 && (
                                <tr>
                                    <td
                                        colspan="7"
                                        class="p-4 text-center text-gray-400"
                                    >
                                        No transactions found
                                    </td>
                                </tr>
                            )
                        }
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            {
                pages > 1 && (
                    <div class="p-4 border-t border-gray-700 flex items-center justify-between">
                        <div class="text-sm text-gray-400">
                            Showing page {page} of {pages}
                        </div>
                        <div class="flex items-center space-x-2">
                            <a
                                href={`/transactions?page=${Math.max(1, page - 1)}`}
                                class={`px-3 py-1 rounded ${
                                    page <= 1
                                        ? "bg-gray-700 text-gray-500 cursor-not-allowed"
                                        : "bg-purple-600 text-white hover:bg-purple-700"
                                }`}
                            >
                                Previous
                            </a>
                            <a
                                href={`/transactions?page=${Math.min(pages, page + 1)}`}
                                class={`px-3 py-1 rounded ${
                                    page >= pages
                                        ? "bg-gray-700 text-gray-500 cursor-not-allowed"
                                        : "bg-purple-600 text-white hover:bg-purple-700"
                                }`}
                            >
                                Next
                            </a>
                        </div>
                    </div>
                )
            }
        </div>
    </main>

    <!-- Delete Confirmation Modal -->
    <div
        id="deleteModal"
        class="fixed inset-0 bg-black bg-opacity-50 items-center justify-center hidden"
    >
        <div class="bg-gray-800 p-6 rounded-lg shadow-xl max-w-md w-full mx-4">
            <h3 class="text-xl font-semibold mb-4">Confirm Delete</h3>
            <p class="mb-6">
                Are you sure you want to delete the selected transaction(s)?
            </p>
            <div class="flex justify-end space-x-4">
                <button
                    id="cancelDelete"
                    class="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition duration-200"
                >
                    Cancel
                </button>
                <button
                    id="confirmDelete"
                    class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition duration-200"
                >
                    Delete
                </button>
            </div>
        </div>
    </div>

    <!-- Group Selection Modal -->
    <div
        id="groupModal"
        class="fixed inset-0 bg-black bg-opacity-50 items-center justify-center hidden"
    >
        <div class="bg-gray-800 p-6 rounded-lg shadow-xl max-w-md w-full mx-4">
            <h3 class="text-xl font-semibold mb-4">Set Group</h3>
            <select
                id="bulkGroupSelect"
                class="w-full px-3 py-2 mb-6 bg-gray-700 text-white rounded focus:ring-2 focus:ring-purple-500 focus:outline-none"
            >
                <option value="">No Group</option>
                {
                    groups.map((group) => (
                        <option value={group.id}>{group.name}</option>
                    ))
                }
            </select>
            <div class="flex justify-end space-x-4">
                <button
                    id="cancelGroup"
                    class="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition duration-200"
                >
                    Cancel
                </button>
                <button
                    id="confirmGroup"
                    class="px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700 transition duration-200"
                >
                    Save
                </button>
            </div>
        </div>
    </div>
</Layout>

<script>
    interface Transaction {
        id: number;
        date: string;
        description: string;
        amount: number;
        type: string;
        groupId: number | null;
        groupName: string;
    }

    let selectedIds = new Set<number>();

    // Get transactions data from the data attribute we added to the table
    const tableData = document
        .querySelector("table")
        ?.getAttribute("data-transactions");
    const transactions: Transaction[] = tableData ? JSON.parse(tableData) : [];

    // DOM Elements
    const quickSearch = document.getElementById(
        "quickSearch",
    ) as HTMLInputElement;
    const globalSearch = document.getElementById(
        "globalSearch",
    ) as HTMLInputElement;
    const searchBtn = document.getElementById("searchBtn");
    const startDate = document.getElementById("startDate") as HTMLInputElement;
    const endDate = document.getElementById("endDate") as HTMLInputElement;
    const typeFilter = document.getElementById(
        "typeFilter",
    ) as HTMLSelectElement;
    const groupFilter = document.getElementById(
        "groupFilter",
    ) as HTMLSelectElement;
    const selectAll = document.getElementById("selectAll") as HTMLInputElement;
    const bulkDeleteBtn = document.getElementById("bulkDeleteBtn");
    const bulkGroupBtn = document.getElementById("bulkGroupBtn");
    const deleteModal = document.getElementById("deleteModal");
    const cancelDelete = document.getElementById("cancelDelete");
    const confirmDelete = document.getElementById("confirmDelete");
    const groupModal = document.getElementById("groupModal");
    const cancelGroup = document.getElementById("cancelGroup");
    const confirmGroup = document.getElementById("confirmGroup");
    const dateRangeFilter = document.getElementById(
        "dateRangeFilter",
    ) as HTMLSelectElement;
    const searchInput = document.getElementById(
        "searchInput",
    ) as HTMLInputElement;

    // Constants for localStorage
    const STORAGE_KEY = "transactionFilters";
    const REFERRER_KEY = "transactionReferrer";

    // Check if we came from the main page
    const referrer = document.referrer;
    const storedReferrer = localStorage.getItem(REFERRER_KEY);

    if (referrer.includes("/dashboard")) {
        // Clear filters if coming from dashboard
        localStorage.removeItem(STORAGE_KEY);
        localStorage.setItem(REFERRER_KEY, referrer);
    } else if (storedReferrer !== referrer) {
        // Load saved filters if not coming from dashboard
        const savedFilters = localStorage.getItem(STORAGE_KEY);
        if (savedFilters) {
            const filters = JSON.parse(savedFilters);
            dateRangeFilter.value = filters.dateRange?.type || "";
            if (filters.search) searchInput.value = filters.search;
        }
    }

    // Function to update URL and reload data
    function applyFilters() {
        const types: string[] = [];

        const filters = {
            dateRange: dateRangeFilter.value
                ? { type: dateRangeFilter.value }
                : null,
            types,
            search: searchInput.value,
        };

        // Save filters to localStorage
        localStorage.setItem(STORAGE_KEY, JSON.stringify(filters));

        // Build URL
        const url = new URL(window.location.href);
        url.searchParams.delete("type");
        url.searchParams.set("page", "1"); // Reset to first page
        if (dateRangeFilter.value)
            url.searchParams.set("dateRange", dateRangeFilter.value);
        else url.searchParams.delete("dateRange");
        types.forEach((type) => url.searchParams.append("type", type));
        if (searchInput.value)
            url.searchParams.set("search", searchInput.value);
        else url.searchParams.delete("search");

        // Navigate to new URL
        window.location.href = url.toString();
    }

    // Add event listeners
    dateRangeFilter.addEventListener("change", applyFilters);

    // Quick Search
    quickSearch?.addEventListener("input", (e: Event) => {
        const target = e.target as HTMLInputElement;
        const searchTerm = target.value.toLowerCase();
        const rows = document.querySelectorAll("tbody tr");

        rows.forEach((row: Element) => {
            const rowElement = row as HTMLElement;
            const id = rowElement.getAttribute("data-transaction-id");
            if (!id) return;

            const transaction = transactions.find((t) => t.id === parseInt(id));
            if (!transaction) return;

            const searchableText =
                `${transaction.date} ${transaction.description} ${transaction.amount} ${transaction.type} ${transaction.groupName}`.toLowerCase();
            rowElement.style.display = searchableText.includes(searchTerm)
                ? ""
                : "none";
        });
    });

    // Global Search
    searchBtn?.addEventListener("click", () => {
        const searchTerm = globalSearch?.value ?? "";
        window.location.href = `/transactions?search=${encodeURIComponent(searchTerm)}`;
    });

    globalSearch?.addEventListener("keypress", (e: KeyboardEvent) => {
        if (e.key === "Enter") {
            searchBtn?.click();
        }
    });

    // Bulk Selection
    selectAll?.addEventListener("change", (e: Event) => {
        const target = e.target as HTMLInputElement;
        const checkboxes = document.querySelectorAll(".transaction-checkbox");
        checkboxes.forEach((cb: Element) => {
            const checkbox = cb as HTMLInputElement;
            checkbox.checked = target.checked;
            const row = checkbox.closest("tr");
            const id = row?.getAttribute("data-transaction-id");
            if (id) {
                if (target.checked) {
                    selectedIds.add(parseInt(id));
                } else {
                    selectedIds.delete(parseInt(id));
                }
            }
        });
        updateBulkButtons();
    });

    document
        .querySelectorAll(".transaction-checkbox")
        .forEach((checkbox: Element) => {
            const cb = checkbox as HTMLInputElement;
            cb.addEventListener("change", (e: Event) => {
                const target = e.target as HTMLInputElement;
                const row = target.closest("tr");
                const id = row?.getAttribute("data-transaction-id");
                if (id) {
                    if (target.checked) {
                        selectedIds.add(parseInt(id));
                    } else {
                        selectedIds.delete(parseInt(id));
                    }
                }
                updateBulkButtons();
            });
        });

    function updateBulkButtons() {
        const hasSelection = selectedIds.size > 0;
        if (bulkDeleteBtn) {
            bulkDeleteBtn.classList.toggle("hidden", !hasSelection);
            bulkDeleteBtn.toggleAttribute("disabled", !hasSelection);
        }
        if (bulkGroupBtn) {
            bulkGroupBtn.classList.toggle("hidden", !hasSelection);
            bulkGroupBtn.toggleAttribute("disabled", !hasSelection);
        }
    }

    // Delete Functionality
    document.querySelectorAll(".delete-btn").forEach((btn: Element) => {
        const button = btn as HTMLButtonElement;
        button.addEventListener("click", (e: Event) => {
            const target = e.target as HTMLButtonElement;
            const id = parseInt(target.getAttribute("data-id") || "0");
            if (id) {
                selectedIds = new Set([id]);
                deleteModal?.classList.remove("hidden");
            }
        });
    });

    bulkDeleteBtn?.addEventListener("click", () => {
        if (deleteModal) {
            deleteModal.classList.remove("hidden");
        }
    });

    cancelDelete?.addEventListener("click", () => {
        if (deleteModal) {
            deleteModal.classList.add("hidden");
        }
    });

    confirmDelete?.addEventListener("click", async () => {
        try {
            const ids = Array.from(selectedIds);
            for (const id of ids) {
                await fetch(`/api/transactions/${id}`, {
                    method: "DELETE",
                });
            }
            window.location.reload();
        } catch (error) {
            console.error("Error deleting transactions:", error);
            // TODO: Show error notification
        }
    });

    // Group Functionality
    bulkGroupBtn?.addEventListener("click", () => {
        if (groupModal) {
            groupModal.classList.remove("hidden");
        }
    });

    cancelGroup?.addEventListener("click", () => {
        if (groupModal) {
            groupModal.classList.add("hidden");
        }
    });

    confirmGroup?.addEventListener("click", async () => {
        const groupSelect = document.getElementById(
            "bulkGroupSelect",
        ) as HTMLSelectElement;
        const newGroupId = groupSelect?.value;
        try {
            const ids = Array.from(selectedIds);
            const currentTransactions = transactions.filter((t) =>
                ids.includes(t.id),
            );

            for (const transaction of currentTransactions) {
                const response = await fetch(
                    `/api/transactions/${transaction.id}`,
                    {
                        method: "PUT",
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify({
                            amount: transaction.amount,
                            type: transaction.type as "income" | "expense",
                            description: transaction.description,
                            transactionDate: new Date(transaction.date),
                            groupId: newGroupId ? parseInt(newGroupId) : null,
                        }),
                    },
                );

                if (!response.ok) {
                    console.error(
                        `Failed to update transaction ${transaction.id}`,
                    );
                }
            }

            // Hide modal and reload page
            if (groupModal) {
                groupModal.classList.add("hidden");
            }
            window.location.reload();
        } catch (error) {
            console.error("Error updating transactions:", error);
            alert("Failed to update transactions");
        }
    });

    // Date Filters
    function applyDateFilter() {
        const start = startDate?.value ? new Date(startDate.value) : null;
        const end = endDate?.value ? new Date(endDate.value) : null;

        const rows = document.querySelectorAll("tbody tr");
        rows.forEach((row: Element) => {
            const rowElement = row as HTMLElement;
            const id = rowElement.getAttribute("data-transaction-id");
            if (!id) return;

            const transaction = transactions.find((t) => t.id === parseInt(id));
            if (!transaction) return;

            const date = new Date(transaction.date);

            // Adjust end date to include the entire day
            const adjustedEnd = end
                ? new Date(end.setHours(23, 59, 59, 999))
                : null;

            const showByDate =
                (!start || date >= start) &&
                (!adjustedEnd || date <= adjustedEnd);
            const showByType =
                !typeFilter?.value || transaction.type === typeFilter.value;
            const showByGroup =
                !groupFilter?.value ||
                transaction.groupId === parseInt(groupFilter.value);

            rowElement.style.display =
                showByDate && showByType && showByGroup ? "" : "none";
        });
    }

    startDate?.addEventListener("change", applyDateFilter);
    endDate?.addEventListener("change", applyDateFilter);
    typeFilter?.addEventListener("change", applyDateFilter);
    groupFilter?.addEventListener("change", applyDateFilter);

    // Date Range Filter
    dateRangeFilter?.addEventListener("change", (e: Event) => {
        const target = e.target as HTMLSelectElement;
        const value = target.value;
        const now = new Date();
        let startDateValue = "";
        let endDateValue = "";

        switch (value) {
            case "last7days":
                startDateValue = new Date(now.setDate(now.getDate() - 7))
                    .toISOString()
                    .split("T")[0];
                endDateValue = new Date().toISOString().split("T")[0];
                break;
            case "last30days":
                startDateValue = new Date(now.setDate(now.getDate() - 30))
                    .toISOString()
                    .split("T")[0];
                endDateValue = new Date().toISOString().split("T")[0];
                break;
            case "thisMonth":
                startDateValue = new Date(now.getFullYear(), now.getMonth(), 1)
                    .toISOString()
                    .split("T")[0];
                endDateValue = new Date(
                    now.getFullYear(),
                    now.getMonth() + 1,
                    0,
                )
                    .toISOString()
                    .split("T")[0];
                break;
            default:
                startDateValue = "";
                endDateValue = "";
        }

        startDate.value = startDateValue;
        endDate.value = endDateValue;
        applyDateFilter();
    });

    // Close modals when clicking outside
    window.addEventListener("click", (e: MouseEvent) => {
        const target = e.target as HTMLElement;
        if (deleteModal && target === deleteModal) {
            deleteModal.classList.add("hidden");
        }
        if (groupModal && target === groupModal) {
            groupModal.classList.add("hidden");
        }
    });
</script>
