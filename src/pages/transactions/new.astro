---
import Layout from "@layouts/Layout.astro";
import Toast from "@comps/Toast.astro";
import { isAuthenticated, getCurrentUserId } from "@midd/auth";
import { prisma } from "@prisma/index.js";

if (!isAuthenticated(Astro.request)) {
    return Astro.redirect("/login");
}

const userId = getCurrentUserId(Astro.request);
if (!userId) {
    return Astro.redirect("/login");
}

// Get all groups for the select input
const groups = await prisma.transactionGroup.findMany({
    where: { userId, softDeleted: false },
    select: { id: true, name: true, type: true },
});

// const groupsJson = JSON.stringify(groups);

const incomeGroups = groups.filter((g) => g.type === "income");
const expenseGroups = groups.filter((g) => g.type === "expense");

let date = Astro.url.searchParams.get("date");
if (date) {
    const parsedDate = new Date(date);
    if (isNaN(parsedDate.getTime())) {
        date = null;
        console.error("Invalid date format:", date);
    } else {
        // Set the date input to the parsed date with the current hour
        const now = new Date();
        parsedDate.setHours(now.getHours() + 2, now.getMinutes());
        date = parsedDate.toISOString().slice(0, 16); // Format to 'YYYY-MM-DDTHH:mm'
    }
}
const type = Astro.url.searchParams.get("type");
const group = Astro.url.searchParams.get("groupId");
let groupId: number | null = null;
try {
    groupId = parseInt(group || "");
} catch (error) {
    console.error("Error parsing groupId:", error);
    groupId = null;
}
/* if (type && !["income", "expense"].includes(type)) {
    return Astro.redirect("/transactions/new");
} */
if (groupId && !groups.some((g) => g.id === groupId)) {
    return Astro.redirect("/transactions/new");
}
---

<Layout title="New Transaction">
    <main class="min-h-screen bg-gray-900 text-white p-8">
        <div class="max-w-4xl mx-auto">
            <header class="mb-8">
                <div class="flex items-center justify-between">
                    <nav class="flex items-baseline space-x-4">
                        <h1 class="text-4xl font-bold text-purple-500">
                            New Transaction
                        </h1>
                        <h2 class="text-lg font-semibold text-purple-300">
                            <a href="/transactions">Back to Transactions</a>
                        </h2>
                    </nav>
                    <a
                        href="/recurring-transactions/new"
                        class="px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700 transition duration-200"
                    >
                        Create Recurring Instead
                    </a>
                </div>
            </header>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                <!-- Transaction Form -->
                <div class="bg-gray-800 p-6 rounded-lg shadow-lg">
                    <form id="transactionForm" class="space-y-6">
                        <div>
                            <div
                                class="flex justify-center space-x-4 items-center"
                            >
                                <span class="block text-lg font-medium">
                                    <span class="text-red-500">*</span> Type:
                                </span>
                                <label class="inline-flex items-center">
                                    <input
                                        id="type"
                                        type="radio"
                                        name="type"
                                        value="income"
                                        class="form-radio accent-purple-600 peer"
                                        required
                                        checked={type === "income"}
                                    />
                                    <span
                                        class="ml-2 peer-checked:text-green-500"
                                        >Income</span
                                    >
                                </label>
                                <label class="inline-flex items-center">
                                    <input
                                        id="type"
                                        type="radio"
                                        name="type"
                                        value="expense"
                                        class="form-radio peer accent-purple-600"
                                        required
                                        checked={type === "expense"}
                                    />
                                    <span class="ml-2 peer-checked:text-red-500"
                                        >Expense</span
                                    >
                                </label>
                            </div>
                            <p
                                class="mt-1 text-sm text-red-500 hidden"
                                id="typeError"
                            >
                            </p>
                        </div>

                        <div>
                            <label
                                class="block text-sm font-medium mb-2"
                                for="amount"
                            >
                                <span class="text-red-500">*</span> Amount (â‚¬)
                            </label>
                            <input
                                type="number"
                                id="amount"
                                name="amount"
                                required
                                min="0.01"
                                step="0.01"
                                class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                                placeholder="0.00"
                            />
                            <p
                                class="mt-1 text-sm text-red-500 hidden"
                                id="amountError"
                            >
                            </p>
                        </div>

                        <div>
                            <label
                                class="block text-sm font-medium mb-2"
                                for="description"
                            >
                                Description
                            </label>
                            <textarea
                                id="description"
                                name="description"
                                rows="3"
                                class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                                placeholder="Enter description"></textarea>
                            <p
                                class="mt-1 text-sm text-red-500 hidden"
                                id="descriptionError"
                            >
                            </p>
                        </div>

                        <div>
                            {
                                groups.length === 0 ? (
                                    <p class="text-sm text-red-500 text-center">
                                        There are no groups available.
                                        <a
                                            href="/transaction-groups/new"
                                            class="text-purple-400 hover:underline"
                                        >
                                            Create Group here
                                        </a>
                                        .
                                    </p>
                                ) : (
                                    <>
                                        <label
                                            class="block text-sm font-medium mb-2"
                                            for="groupId"
                                        >
                                            <a
                                                href="/transaction-groups"
                                                class="hover:underline"
                                            >
                                                Group
                                            </a>
                                        </label>
                                        <div class="w-full flex flex-row items-center gap-5">
                                            <select
                                                id="groupId"
                                                name="groupId"
                                                class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                                            >
                                                <option value="">
                                                    No Group
                                                </option>

                                                {incomeGroups.length > 0 && (
                                                    <optgroup label="Income Groups">
                                                        {incomeGroups.map(
                                                            (group) => (
                                                                <option
                                                                    value={
                                                                        group.id
                                                                    }
                                                                    selected={
                                                                        group.id ===
                                                                        groupId
                                                                    }
                                                                >
                                                                    {group.name}
                                                                </option>
                                                            ),
                                                        )}
                                                    </optgroup>
                                                )}
                                                {expenseGroups.length > 0 && (
                                                    <optgroup label="Expense Groups">
                                                        {expenseGroups.map(
                                                            (group) => (
                                                                <option
                                                                    value={
                                                                        group.id
                                                                    }
                                                                    selected={
                                                                        group.id ===
                                                                        groupId
                                                                    }
                                                                >
                                                                    {group.name}
                                                                </option>
                                                            ),
                                                        )}
                                                    </optgroup>
                                                )}
                                            </select>
                                            <a
                                                href="/transaction-groups/new"
                                                class="mt-1 block px-3 py-2 bg-gray-700 border border-gray-600 rounded-md hover:ring-2 hover:ring-purple-500"
                                            >
                                                New
                                            </a>
                                        </div>
                                    </>
                                )
                            }
                            <p
                                class="mt-1 text-sm text-red-500 hidden"
                                id="groupError"
                            >
                            </p>
                        </div>

                        <div>
                            <label
                                class="block text-sm font-medium mb-2"
                                for="transactionDate"
                            >
                                <span class="text-red-500">*</span> Date & Time
                            </label>
                            <input
                                type="datetime-local"
                                id="transactionDate"
                                name="transactionDate"
                                value={new Date(
                                    date
                                        ? date + 2 * 60 * 60 * 1000
                                        : Date.now() + 2 * 60 * 60 * 1000,
                                )
                                    .toISOString()
                                    .slice(0, 16)}
                                required
                                class="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                            />
                            <p
                                class="mt-1 text-sm text-red-500 hidden"
                                id="dateError"
                            >
                            </p>
                        </div>

                        <div class="flex justify-end space-x-4">
                            <a
                                href="/transactions"
                                class="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition duration-200"
                            >
                                Cancel
                            </a>
                            <button
                                type="button"
                                id="previewBtn"
                                class="px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700 transition duration-200"
                            >
                                Preview
                            </button>
                        </div>
                    </form>
                </div>

                <!-- Preview Card -->
                <div
                    id="previewCard"
                    class="bg-gray-800 p-6 rounded-lg shadow-lg hidden"
                >
                    <h3 class="text-xl font-semibold text-purple-400 mb-4">
                        Preview
                    </h3>
                    <dl class="space-y-4">
                        <div>
                            <dt class="text-sm font-medium text-gray-400">
                                Type
                            </dt>
                            <dd id="previewType" class="mt-1"></dd>
                        </div>
                        <div>
                            <dt class="text-sm font-medium text-gray-400">
                                Amount
                            </dt>
                            <dd id="previewAmount" class="mt-1"></dd>
                        </div>
                        <div>
                            <dt class="text-sm font-medium text-gray-400">
                                Description
                            </dt>
                            <dd id="previewDescription" class="mt-1"></dd>
                        </div>
                        <div>
                            <dt class="text-sm font-medium text-gray-400">
                                Date & Time
                            </dt>
                            <dd id="previewDate" class="mt-1"></dd>
                        </div>
                        <div>
                            <dt class="text-sm font-medium text-gray-400">
                                Group
                            </dt>
                            <dd id="previewGroup" class="mt-1"></dd>
                        </div>
                    </dl>
                    <div class="mt-6">
                        <button
                            type="button"
                            id="saveBtn"
                            class="w-full px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition duration-200 flex items-center justify-center disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                            <svg
                                id="saveSpinner"
                                class="w-5 h-5 mr-2 animate-spin hidden"
                                viewBox="0 0 24 24"
                            >
                                <circle
                                    class="opacity-25"
                                    cx="12"
                                    cy="12"
                                    r="10"
                                    stroke="currentColor"
                                    stroke-width="4"></circle>
                                <path
                                    class="opacity-75"
                                    fill="currentColor"
                                    d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                                ></path>
                            </svg>
                            <span id="saveText">Save Transaction</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Unsaved Changes Dialog -->
        <div
            id="unsavedDialog"
            class="fixed inset-0 bg-black bg-opacity-50 items-center justify-center hidden"
        >
            <div
                class="bg-gray-800 p-6 rounded-lg shadow-xl max-w-md w-full mx-4"
            >
                <h3 class="text-xl font-semibold mb-4">Unsaved Changes</h3>
                <p class="mb-6">
                    You have unsaved changes. Are you sure you want to leave?
                </p>
                <div class="flex justify-end space-x-4">
                    <button
                        id="stayBtn"
                        class="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition duration-200"
                    >
                        Stay
                    </button>
                    <button
                        id="leaveBtn"
                        class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition duration-200"
                    >
                        Leave
                    </button>
                </div>
            </div>
        </div>
    </main>
    <Toast />
</Layout>

<script>
    let hasChanges = false;
    let leavingTo: string | null = null;

    // Form elements
    // const typeInput = document.getElementById("type") as HTMLSelectElement;
    const typeRadios = document.querySelectorAll(
        'input[name="type"]',
    ) as NodeListOf<HTMLInputElement>;

    const amountInput = document.getElementById("amount") as HTMLInputElement;
    const descriptionInput = document.getElementById(
        "description",
    ) as HTMLTextAreaElement;
    const dateInput = document.getElementById(
        "transactionDate",
    ) as HTMLInputElement;
    const groupInput = document.getElementById("groupId") as HTMLSelectElement;

    // Preview elements
    const previewBtn = document.getElementById("previewBtn");
    const previewCard = document.getElementById("previewCard");
    const previewType = document.getElementById("previewType");
    const previewAmount = document.getElementById("previewAmount");
    const previewDescription = document.getElementById("previewDescription");
    const previewDate = document.getElementById("previewDate");
    const previewGroup = document.getElementById("previewGroup");
    const saveBtn = document.querySelector(
        "button#saveBtn",
    ) as HTMLButtonElement;

    // Dialog elements
    const unsavedDialog = document.getElementById("unsavedDialog");
    const stayBtn = document.getElementById("stayBtn");
    const leaveBtn = document.getElementById("leaveBtn");

    let radioChecked: boolean = false;
    // Track changes
    [
        ...typeRadios,
        amountInput,
        descriptionInput,
        dateInput,
        groupInput,
    ].forEach((input) => {
        input?.addEventListener("change", () => {
            hasChanges = true;
            validateField(input);
        });
    });

    // Client-side validation
    function validateField(input: HTMLElement) {
        const error = document.getElementById(`${input.id}Error`);
        if (!error) return true;

        error.classList.add("hidden");

        if (input.id === "type" && !radioChecked) {
            if ([...typeRadios].every((radio) => !radio.checked)) {
                error.textContent = "Please select a type";
                error.classList.remove("hidden");
                radioChecked = true;
                return false;
            }
        }

        if (input.id === "amount") {
            const amount = input as HTMLInputElement;
            if (!amount.value) {
                error.textContent = "Please enter an amount";
                error.classList.remove("hidden");
                return false;
            }
            const value = parseFloat(amount.value);
            if (isNaN(value) || value <= 0) {
                error.textContent = "Please enter a valid positive amount";
                error.classList.remove("hidden");
                return false;
            }
        }

        if (input.id === "transactionDate") {
            const date = input as HTMLInputElement;
            if (!date.value) {
                error.textContent = "Please select a date and time";
                error.classList.remove("hidden");
                return false;
            }
        }

        return true;
    }

    function validateForm() {
        let isValid = true;
        let errors: any[] = [];

        [...typeRadios, amountInput, dateInput].forEach((input) => {
            if (!validateField(input)) {
                isValid = false;
                const error = document.getElementById(`${input.id}Error`);
                if (error && error.textContent) {
                    errors.push(error.textContent);
                }
            }
        });

        if (!isValid) {
            window.showToast(
                `Please fix the following: ${errors.join(", ")}`,
                "error",
            );
        }
        return isValid;
    }

    // Preview functionality
    previewBtn?.addEventListener("click", () => {
        if (!validateForm()) return;

        const selectedType = [...typeRadios].find((radio) => radio.checked);
        if (previewType) {
            previewType.textContent =
                selectedType?.value === "income" ? "ðŸŸ¢ Income" : "ðŸ”´ Expense";
            previewType.className =
                selectedType?.value === "income"
                    ? "mt-1 text-green-500"
                    : "mt-1 text-red-500";
        }

        if (previewAmount) {
            const amount = parseFloat(amountInput.value);
            previewAmount.textContent = `${amount.toLocaleString("es-ES", { minimumFractionDigits: 2 })} â‚¬`;
            previewAmount.className =
                selectedType?.value === "income"
                    ? "mt-1 text-green-500"
                    : "mt-1 text-red-500";
        }

        if (previewDescription) {
            previewDescription.textContent = descriptionInput.value || "-";
        }

        if (previewDate) {
            const date = new Date(dateInput.value);
            previewDate.textContent = date.toLocaleString("es-ES", {
                day: "numeric",
                month: "short",
                year: "numeric",
                hour: "2-digit",
                minute: "2-digit",
            });
        }

        if (previewGroup) {
            const selectedOption = groupInput?.selectedOptions[0];
            previewGroup.textContent = selectedOption
                ? selectedOption.text
                : "No Group";
        }

        previewCard?.classList.remove("hidden");
    });

    // Save functionality
    saveBtn?.addEventListener("click", async () => {
        if (!validateForm()) return;

        // Find the selected transaction type
        const selectedType = [...typeRadios].find((radio) => radio.checked);

        // Show loading state
        const saveSpinner = document.getElementById("saveSpinner");
        const saveText = document.getElementById("saveText");
        if (saveSpinner && saveText && saveBtn) {
            saveSpinner.classList.remove("hidden");
            saveText.textContent = "Saving...";
            saveBtn.disabled = true;
        }

        try {
            const response = await fetch("/api/transactions", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    type: selectedType?.value,
                    amount: parseFloat(amountInput.value),
                    description: descriptionInput.value || null,
                    transactionDate: new Date(dateInput.value).toISOString(),
                    groupId: groupInput?.value
                        ? parseInt(groupInput.value)
                        : null,
                }),
            });

            if (!response.ok) {
                let error;
                try {
                    const errorData = await response.json();
                    error = errorData["validationErrors"] || "Unknown error";
                } catch (error) {
                    console.error(
                        "[new] Failed to parse error response:",
                        error,
                    );
                }

                throw new Error(
                    "[new] Failed to create transaction - " + error[0].message,
                );
            } else {
                const data = await response.json();
                console.log("Transaction created:", data);
            }

            window.showToast("Transaction created successfully!", "success");
            hasChanges = false;
            window.location.href = "/transactions";
        } catch (error) {
            console.error("Error creating transaction:", error);
            window.showToast(
                error instanceof Error
                    ? error.message
                    : "[new] Failed to create transaction",
                "error",
            );
            // Reset loading state
            if (saveSpinner && saveText && saveBtn) {
                saveSpinner.classList.add("hidden");
                saveText.textContent = "Save Transaction";
                saveBtn.disabled = false;
            }
        }
    });

    // Handle navigation
    document.querySelectorAll("a").forEach((link) => {
        link.addEventListener("click", (e) => {
            if (!hasChanges) return;

            e.preventDefault();
            leavingTo = link.href;
            unsavedDialog?.classList.remove("hidden");
        });
    });

    window.addEventListener("beforeunload", (e) => {
        if (hasChanges) {
            e.preventDefault();
            // e.returnValue = "";
        }
    });

    // Dialog buttons
    stayBtn?.addEventListener("click", () => {
        unsavedDialog?.classList.add("hidden");
        leavingTo = null;
    });

    leaveBtn?.addEventListener("click", () => {
        hasChanges = false;
        if (leavingTo) {
            window.location.href = leavingTo;
        }
    });

    // Close dialog when clicking outside
    unsavedDialog?.addEventListener("click", (e) => {
        if (e.target === unsavedDialog) {
            unsavedDialog.classList.add("hidden");
            leavingTo = null;
        }
    });
</script>
